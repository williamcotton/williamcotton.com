# Base authentication and environment validation
pipeline contentfulAuth =
  |> lua: `
    local spaceId = getEnv("CONTENTFUL_SPACE")
    local token = getEnv("CONTENTFUL_ACCESS_TOKEN")
    
    if not spaceId or not token then
      return {
        errors = {{
          type = "configError",
          message = "Missing Contentful configuration: CONTENTFUL_SPACE and CONTENTFUL_ACCESS_TOKEN required"
        }}
      }
    end
    
    return {
      contentful = {
        spaceId = spaceId,
        token = token
      },
      params = request.params or {},
      query = request.query or {},
      originalRequest = request
    }
  `

# Generic Contentful API fetcher
pipeline contentfulFetch =
  |> lua: `
    local cf = request.contentful
    local contentType = request.contentType or "blogPost"
    local filters = request.filters or ""
    
    return {
      fetchUrl = "https://cdn.contentful.com/spaces/" .. cf.spaceId .. "/entries?content_type=" .. contentType .. filters .. "&include=10",
      fetchHeaders = {
        ["Authorization"] = "Bearer " .. cf.token
      },
      contentful = cf,
      params = request.params,
      query = request.query,
      originalRequest = request.originalRequest
    }
  `
  |> fetch: `_`

# Blog posts list pipeline
pipeline contentfulArticles =
  |> pipeline: contentfulAuth
  |> jq: `. + { contentType: "blogPost", filters: "&fields.hidden=false&order=-fields.publishedDate" }`
  |> cache: `
    enabled: true,
    ttl: 60
  `
  |> pipeline: contentfulFetch
  |> lua: `
    if request.data and request.data.response then
      local entries = request.data.response.items or {}

      local processedEntries = {}
      for i, entry in ipairs(entries) do
        local fields = entry.fields or {}
        local body = fields.body or {}
        local content = body.content or {}
        
        -- Take only first 4 content nodes for preview
        local trimmedContent = {}
        for j = 1, math.min(4, #content) do
          table.insert(trimmedContent, content[j])
        end
        
        local trimmedBody = {
          content = trimmedContent,
          nodeType = body.nodeType,
          data = body.data
        }
        
        local processedFields = {}
        for k, v in pairs(fields) do
          processedFields[k] = v
        end
        processedFields.body = trimmedBody
        
        -- Render the trimmed body content for preview
        processedFields.bodyPreview = contentful.renderRichText(trimmedBody, request.data.response)
        
        -- Format published date
        processedFields.formattedDate = dateFormatter.formatPublishedDate(fields.publishedDate)
        
        table.insert(processedEntries, {
          fields = processedFields,
          sys = entry.sys
        })
      end
      
      return {
        articles = processedEntries,
        total = request.data.response.total or 0,
        message = "Blog articles retrieved successfully"
      }
    else
      return {
        errors = {{
          type = "contentfulError",
          message = "Failed to fetch articles from Contentful",
          details = request.data
        }}
      }
    end
  `

# Single entry by article pipeline
pipeline contentfulByArticle =
  |> pipeline: contentfulAuth
  |> jq: `. + { filters: ("&fields.slug[in]=" + .params.article) }`
  |> cache: `
    enabled: true,
    ttl: 120
  `
  |> pipeline: contentfulFetch
  |> lua: `
    if request.data and request.data.response and request.data.response.items then
      local items = request.data.response.items
      if #items > 0 then
        local entry = items[1]
        local fields = entry.fields or {}
        
        -- Format published date
        local formattedDate = dateFormatter.formatPublishedDate(fields.publishedDate)
        
        return {
          title = fields.title or "Untitled",
          bodyHtml = contentful.renderRichText(fields.body, request.data.response),
          slug = fields.slug or "",
          publishedDate = fields.publishedDate or entry.sys.createdAt,
          formattedDate = formattedDate,
          author = fields.author or "William Cotton",
          excerpt = fields.excerpt or "",
          tags = fields.tags or {},
          description = fields.description or fields.excerpt or "",
          contentType = entry.sys.contentType.sys.id
        }
      else
        return {
          errors = {{
            type = "notFound",
            message = "Article not found with slug: " .. request.params.article,
            slug = request.params.article
          }}
        }
      end
    else
      return {
        errors = {{
          type = "contentfulError",
          message = "Failed to fetch article from Contentful",
          slug = request.params.article
        }}
      }
    end
  `

# Pages by page pipeline  
pipeline contentfulPages =
  |> pipeline: contentfulAuth
  |> jq: `. + { contentType: "page", filters: ("&fields.slug[in]=" + .params.page) }`
  |> cache: `
    enabled: true,
    ttl: 120
  `
  |> pipeline: contentfulFetch
  |> lua: `
    if request.data and request.data.response and request.data.response.items then
      local items = request.data.response.items
      if #items > 0 then
        local entry = items[1]
        local fields = entry.fields or {}
        
        return {
          title = fields.title or "Untitled",
          bodyHtml = contentful.renderBasicRichText(fields.body, request.data.response.includes),
          slug = fields.slug or "",
          description = fields.description or "",
          contentType = entry.sys.contentType.sys.id
        }
      else
        return {
          errors = {{
            type = "notFound",
            message = "Page not found with slug: " .. request.params.page,
            slug = request.params.page
          }}
        }
      end
    else
      return {
        errors = {{
          type = "contentfulError",
          message = "Failed to fetch page from Contentful",
          slug = request.params.page
        }}
      }
    end
  `

handlebars title = `William Cotton`

handlebars metaTags = `<meta name="description" content="William Cotton">`

handlebars headExtras = ``

handlebars footerScripts = ``

handlebars baseLayout = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1"/>
    <link rel="preload" href="LigaMenlo-Regular.woff" as="font" type="font/woff" crossorigin>
    <title id="page-title">{{> title}}</title>
    <link rel="stylesheet" href="/app.css"/>
    {{> metaTags}}
    {{> headExtras}}
</head>
<body>
    <div id="app">
        <div class="sitewrapper">
            <header>
                <h1>
                    <a href="/" hx-get="/htmx/" hx-target="#main-content" hx-swap="innerHTML" hx-push-url="/">williamcotton.com</a>
                </h1>
                <nav>
                    <a href="/about" hx-get="/htmx/about" hx-target="#main-content" hx-swap="innerHTML" hx-push-url="/about">About</a>
                    <a href="/bio" hx-get="/htmx/bio" hx-target="#main-content" hx-swap="innerHTML" hx-push-url="/bio">Bio</a>
                    <a href="/contact" hx-get="/htmx/contact" hx-target="#main-content" hx-swap="innerHTML" hx-push-url="/contact">Contact</a>
                </nav>
            </header>
            <div class="content" id="main-content">
{{> @partial-block}}
            </div>
            <footer>
                <p>© 2025 William Cotton</p>
            </footer>
        </div>
    </div>
    {{> footerScripts}}

</body>
</html>
`

handlebars blogLayout = `
{{#> baseLayout}}
  {{#*inline "metaTags"}}{{#if description}}<meta name="description" content="{{description}}">{{/if}}{{/inline}}
  {{#*inline "headExtras"}}
    <script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/languages/fsharp.min.js"></script>
    <script src="/hljs-wp.js"></script>
  {{/inline}}
  {{#*inline "footerScripts"}}
    <script>try{hljs.highlightAll();}catch(e){}</script>
  {{/inline}}
{{> @partial-block}}
{{/baseLayout}}
`

handlebars articleListItem = `
<article>
    <h2>
        <a href="/articles/{{fields.slug}}" 
           hx-get="/htmx/articles/{{fields.slug}}" 
           hx-target="#main-content" 
           hx-swap="innerHTML show:window:top"
           hx-push-url="/articles/{{fields.slug}}">{{fields.title}}</a>
    </h2>
    {{#if fields.formattedDate}}<p class="published-date">{{fields.formattedDate}}</p>{{/if}}
{{#if fields.bodyPreview}} {{{fields.bodyPreview}}} {{/if}}
    
</article>
`

handlebars articleList = `
  {{#each articles}}
{{> articleListItem}}
  {{else}}
    <p>No articles found.</p>
  {{/each}}
`

handlebars article = `
  <article>
      <h2>{{title}}</h2>
      {{#if formattedDate}}<p class="published-date">{{formattedDate}}</p>{{/if}}
      {{{bodyHtml}}}
  </article>
  `

handlebars articleListLayout = `
{{#> blogLayout}}
  {{#*inline "title"}}William Cotton{{/inline}}
{{> articleList}}
{{/blogLayout}}`

## Front page with site structure
GET /
  |> pipeline: contentfulArticles
  |> result
    ok(200):
      |> handlebars: articleListLayout
    contentfulError(500):
      |> jq: `{ errorMessage: .errors[0].message, errorDetails: .errors[0].details }`
      |> handlebars: `
        {{#> blogLayout}}
          {{#*inline "title"}}Error - William Cotton{{/inline}}
          <div class="error">
            <h2>Error Loading Articles</h2>
            <p>{{errorMessage}}</p>
            <p><a href="/" hx-get="/htmx/" hx-target="#main-content" hx-swap="innerHTML" hx-push-url="/">← Try again</a></p>
          </div>
        {{/blogLayout}}
      `
    default(500):
      |> handlebars: `
        {{#> blogLayout}}
          {{#*inline "title"}}Error - William Cotton{{/inline}}
          <div class="error">
            <h2>Unexpected Error</h2>
            <p>Something went wrong while loading the articles.</p>
            <p><a href="/" hx-get="/htmx/" hx-target="#main-content" hx-swap="innerHTML" hx-push-url="/">← Try again</a></p>
          </div>
        {{/blogLayout}}
      `

## HTMX Homepage endpoint (returns just content)
GET /htmx/
  |> pipeline: contentfulArticles
  |> result
    ok(200):
      |> handlebars: `
{{> articleList}}
        <title id="page-title" hx-swap-oob="true">William Cotton</title>
        <script>hljs.highlightAll();</script>
      `
    default(500):
      |> handlebars: `
        <div class="error">
          <h2>Error Loading Articles</h2>
          <p>Something went wrong while loading the articles.</p>
        </div>
      `

## Blog article
GET /articles/:article
  |> pipeline: contentfulByArticle
  |> result
    ok(200):
      |> handlebars: `
        {{#> blogLayout}}
          {{#*inline "title"}}{{title}} - William Cotton{{/inline}}
          {{#*inline "metaTags"}}{{#if description}}<meta name="description" content="{{description}}">{{/if}}{{/inline}}
{{> article}}
        {{/blogLayout}}
      `

## HTMX Article endpoint (returns just article content)
GET /htmx/articles/:article
  |> pipeline: contentfulByArticle
  |> result
    ok(200):
      |> handlebars: `
        {{> article}}
        <title id="page-title" hx-swap-oob="true">{{title}} - William Cotton</title>
        <script>hljs.highlightAll();</script>
      `

## HTMX Page endpoint (returns just page content)
GET /htmx/:page
  |> pipeline: contentfulPages
  |> result
    ok(200):
      |> handlebars: `
        <h2>{{title}}</h2>
        {{{bodyHtml}}}
        <title id="page-title" hx-swap-oob="true">{{title}} - William Cotton</title>
      `
    notFound(404):
      |> jq: `{ pageSlug: .errors[0].slug, errorMessage: .errors[0].message }`
      |> handlebars: `
        <h2>Page Not Found</h2>
        <p>{{errorMessage}}</p>
        <p><a href="/" hx-get="/htmx/" hx-target="#main-content" hx-swap="innerHTML" hx-push-url="/">← Back to home</a></p>
      `
    default(500):
      |> handlebars: `
        <h2>Error Loading Page</h2>
        <p>Something went wrong while loading the page.</p>
        <p><a href="/" hx-get="/htmx/" hx-target="#main-content" hx-swap="innerHTML" hx-push-url="/">← Back to home</a></p>
      `

## Page
GET /:page
  |> pipeline: contentfulPages
  |> result
    ok(200):
      |> handlebars: `
        {{#> baseLayout}}
          {{#*inline "title"}}{{title}} - William Cotton{{/inline}}
          {{#*inline "metaTags"}}{{#if description}}<meta name="description" content="{{description}}">{{/if}}{{/inline}}
          <h2>{{title}}</h2>
          {{{bodyHtml}}}
        {{/baseLayout}}
      `
    notFound(404):
      |> jq: `{ pageSlug: .errors[0].slug, errorMessage: .errors[0].message }`
      |> handlebars: `
        {{#> baseLayout}}
          {{#*inline "title"}}Page Not Found - William Cotton{{/inline}}
          <h2>Page Not Found</h2>
          <p>{{errorMessage}}</p>
          <p><a href="/" hx-get="/htmx/" hx-target="#main-content" hx-swap="innerHTML" hx-push-url="/">← Back to home</a></p>
        {{/baseLayout}}
      `
    contentfulError(500):
      |> jq: `{ pageSlug: .errors[0].slug, errorMessage: .errors[0].message }`
      |> handlebars: `
        {{#> baseLayout}}
          {{#*inline "title"}}Error - William Cotton{{/inline}}
          <h2>Error Loading Page</h2>
          <p>{{errorMessage}}</p>
          <p><a href="/" hx-get="/htmx/" hx-target="#main-content" hx-swap="innerHTML" hx-push-url="/">← Back to home</a></p>
        {{/baseLayout}}
      `
    default(500):
      |> handlebars: `
        {{#> baseLayout}}
          {{#*inline "title"}}Error - William Cotton{{/inline}}
          <h2>Unexpected Error</h2>
          <p>Something went wrong while loading the page.</p>
          <p><a href="/" hx-get="/htmx/" hx-target="#main-content" hx-swap="innerHTML" hx-push-url="/">← Back to home</a></p>
        {{/baseLayout}}
      `

describe "contentfulArticles pipeline"
  it "fetches and processes articles from live data"
    when executing pipeline contentfulArticles
    with input `{}`
    then output contains `{ "articles": [] }`

describe "contentfulByArticle pipeline"
  it "fetches specific article by slug"
    when executing pipeline contentfulByArticle
    with input `{ "params": { "article": "a-burrito-is-a-monad" } }`
    then output `.title` equals "A Burrito Is a Monad"
    and output `.slug` equals "a-burrito-is-a-monad"
    and output `.contentType` equals "blogPost"

  it "returns not found error for nonexistent article"
    when executing pipeline contentfulByArticle
    with input `{ "params": { "article": "this-article-does-not-exist-12345" } }`
    then output contains `{
      "errors": [{
        "type": "notFound",
        "message": "Article not found with slug: this-article-does-not-exist-12345",
        "slug": "this-article-does-not-exist-12345"
      }]
    }`

describe "contentfulPages pipeline"
  it "fetches about page"
    when executing pipeline contentfulPages
    with input `{ "params": { "page": "about" } }`
    then output `.slug` equals "about"
    and output `.contentType` equals "page"

  it "returns not found error for missing page"
    when executing pipeline contentfulPages
    with input `{ "params": { "page": "nonexistent-page-12345" } }`
    then output contains `{
      "errors": [{
        "type": "notFound",
        "message": "Page not found with slug: nonexistent-page-12345",
        "slug": "nonexistent-page-12345"
      }]
    }`

describe "homepage route"
  it "returns homepage with articles"
    when calling GET /
    then status is 200
    and output contains "williamcotton.com"
    and output contains "<article>"

describe "htmx homepage route"
  it "returns article content for htmx requests"
    when calling GET /htmx/
    then status is 200
    and output contains `<title id="page-title" hx-swap-oob="true">William Cotton</title>`
    and output contains "<article>"

describe "article route"
  it "returns burrito monad article page"
    when calling GET /articles/a-burrito-is-a-monad
    then status is 200
    and output contains "A Burrito Is a Monad"
    and output contains "Some Chicken"
    and output contains `<title id="page-title">A Burrito Is a Monad - William Cotton</title>`

describe "htmx article route"
  it "returns article content for htmx requests"
    when calling GET /htmx/articles/a-burrito-is-a-monad
    then status is 200
    and output contains "A Burrito Is a Monad"
    and output contains "Some Chicken"
    and output contains `<title id="page-title" hx-swap-oob="true">A Burrito Is a Monad - William Cotton</title>`

describe "page route"
  it "returns about page"
    when calling GET /about
    then status is 200
    and output contains "williamcotton.com"

describe "htmx page route"
  it "returns page content for htmx requests"
    when calling GET /htmx/about
    then status is 200
    and output contains `<title id="page-title" hx-swap-oob="true">`

  it "returns 404 for missing htmx page"
    when calling GET /htmx/nonexistent-page-12345
    then status is 404
    and output contains "Page Not Found"
    and output contains "Page not found with slug: nonexistent-page-12345"
